% ========================================================================
% GMSH_IMPORT: Import a .m-file generated by GMSH
% and convert it into a structured format for body-wise processing.
%
% Usage:
% bodies = import_gmsh('C:/path/to/mesh/full_satellite.m');
%
% The input file must define a variable 'msh' with fields:
% - msh.POS: Node positions (n_nodes × 3)
% - msh.TRIANGLES: Element definitions (n_elements × 4), where
% columns 1:3 = node indices of each triangle
% column 4 = body ID
%
% Inputs:
% - relative_path: Path to the .m file containing the msh structure
%
% Output:
% bodies: 1×n cell array where n is the number of unique bodies
% Each cell contains a body_data struct with:
% - vertices_B: 3×3×n_triangles array (initially in CAD frame)
% - centroids_B: 3×n matrix of triangle centroids
% - normals_B: 3×n matrix of normal vectors
% - areas: 1×n vector of triangle areas
% ========================================================================
function bodies = import_gmsh(relative_path)

% Convert to char if it's a string to ensure compatibility
if isstring(relative_path)
    relative_path = char(relative_path);
end

% Save current working directory to restore it later
old_dir = pwd;

% Separate file path, name and extension
[filepath, filename, ext] = fileparts(relative_path);

% If a folder is specified, switch into it
if ~isempty(filepath)
    cd(filepath);
end

clear msh; % Ensure no leftover msh variable from workspace

% Create the full file path and ensure it's a char
full_file_path = char(fullfile(filepath, [filename, ext]));

% Check if the file exists
if ~exist(full_file_path, 'file')
    error('File not found: %s', full_file_path);
end

% Run the GMSH-exported .m file (should define 'msh')
% Use the char version to ensure compatibility with run function
run(full_file_path);

% Validate msh struct existence
if ~exist('msh', 'var')
    error('The GMSH-exported file does not define a "msh" structure.');
end

% Get all unique body IDs from the 4th column of the triangle data
body_ids = sort(unique(msh.TRIANGLES(:,4)));
num_bodies = length(body_ids);

fprintf('Found %d unique bodies in GMSH file.\n', num_bodies);

% Initialize cell array for all bodies
bodies = cell(1, num_bodies);

% Process each body
for body_index = 1:num_bodies
    target_body_id = body_ids(body_index);
    
    fprintf('Processing body %d (ID: %d)...\n', body_index, target_body_id);
    
    % Extract vertices for the specific body
    body_triangles = msh.TRIANGLES(msh.TRIANGLES(:,4) == target_body_id, 1:3);
    
    if isempty(body_triangles)
        warning('No triangles found for body ID %d', target_body_id);
        continue;
    end
    
    % Reshape vertices: 3×3×n_triangles (initially in CAD frame)
    vertices_CAD = reshape(msh.POS(reshape(body_triangles', [], 1), :)', ...
                          [3, 3, size(body_triangles, 1)]);
    
    % Compute triangle centroids (mean of each triangle's 3 vertices)
    centroids_CAD = reshape(mean(vertices_CAD, 2), 3, []);
    
    % Compute normal vectors for each triangle: cross(v2−v1, v3−v1)
    normals_CAD = reshape(cross(vertices_CAD(:,2,:) - vertices_CAD(:,1,:), ...
                               vertices_CAD(:,3,:) - vertices_CAD(:,1,:)), 3, []);
    
    % Normalize the normal vectors
    normal_norms = vecnorm(normals_CAD);
    normals_CAD = normals_CAD ./ normal_norms;
    
    areas = 0.5 * normal_norms;
    
    % Create structure for current body (initially in CAD frame)
    bodies{body_index} = struct('vertices_B', vertices_CAD, ...  
                               'centroids_B', centroids_CAD, ...  
                               'normals_B', normals_CAD, ...      
                               'areas', areas);
    
    fprintf('Body %d: %d triangles processed.\n', body_index, size(body_triangles, 1));
end

% Return to original working directory
cd(old_dir);

fprintf('GMSH import completed successfully.\n');
end
